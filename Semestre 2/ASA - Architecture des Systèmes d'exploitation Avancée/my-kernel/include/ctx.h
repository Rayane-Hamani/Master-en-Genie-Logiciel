#pragma once



#include "ctx_list.h"



#define CTX_MAGIC      0x42424242
#define CTX_STACK_SIZE (2 * 4096)
#define MAX_CTX_NUM    16
#define NULL           0



typedef void (*func_t)(void*);
typedef struct ctx_s ctx_lst_t;
enum ctx_state_e { UNDEFINED, NEWBORN, RUNNABLE, TERMINATED, BLOCKED };



typedef struct ctx_s {
  void* esp;
  void* ebp;
  unsigned char stack[CTX_STACK_SIZE];
  func_t f;
  void* f_args;
  enum ctx_state_e state;
  unsigned int magic;
  struct ctx_s* prev;
  struct ctx_s* next;
} ctx_t;



void init_contexts(); // to be called in the main during sys init

ctx_t* alloc_context(func_t f, void* f_args);
void free_context(ctx_t* c);

void switch_to(ctx_t* ctx);
void yield();



typedef struct sem_s
{
	int counter;
	ctx_lst_t blocked_ctx_lst;
} sem_t;



void sem_init(sem_t* s, int c);
void sem_down(sem_t* s);
void sem_up(sem_t* s);