#ifndef _EXERCICE3_
#define _EXERCICE3_

#define SYSCALL_SWTCH_0 16
#define SYSCALL_SWTCH_1 17



#define MMU_ENABLE        1     /* MMU_ENABLE = 0 => simulation de la MMU désactivée                                                                                                                      */
#define MMU_IRQ           13    /* Niveau d'interruption de la MMU                                                                                                                                        */
#define MMU_CMD           0x66  /* Registre de commande de la MMU                                                                                                                                         */
#define MMU_FAULT_ADDR_LO 0xCC  /* Registre contenant l'adresse mémoire ayant provoqué une faute (32 bits de poids faible)                                                                                */
#define MMU_FAULT_ADDR_HI 0xCD  /* Registre contenant l'adresse mémoire ayant provoqué une faute (32 bits de poids fort)                                                                                  */

#define TLB_ADD_ENTRY     0xCE  /* */
#define TLB_DEL_ENTRY     0xDE  /* Registre de commande de suppression d'entrée dans la TLB. Seule phys_page est lue, et toutes les entrées correspondant à cette page physique sont supprimées de la TLB */
#define TLB_SIZE          32    /* Nombre d'entrées dans la TLB                                                                                                                                           */
#define TLB_ENTRIES       0x800 /* Registre contenant les entrées de la TLB (32 bits par entrée). Accessible en lecture comme en écriture avec le même format que celui utilisé par TLB_ADD_ENTRY         */



#define PAGE_SIZE 4096 // same pour mémoire physique et virtuelle

#define PM_PAGES 254 // -1 réservé au IRQVECTOR -1 pour obtenir un nombre pair
#define VM_PAGES 4096

#define PM_SIZE (PAGE_SIZE * PM_PAGES)
#define VM_SIZE (PAGE_SIZE * VM_PAGES)

#define FIRST_PM_ADDRESS physical_memory
#define FIRST_VM_ADDRESS virtual_memory

#define LAST_PM_ADDRESS (FIRST_PM_ADDRESS + PM_SIZE - 1)
#define LAST_VM_ADDRESS (FIRST_VM_ADDRESS + VM_SIZE - 1)



int pmapping[PM_PAGES];
int vmapping[VM_PAGES];



int ppage_of_vpage(int process, unsigned vpage); // retourne la page physique de l'adresse virtuelle

int sum(void *ptr);

void switch_to_process0(void);
void switch_to_process1(void);



#endif
